UID: vnguyen7
Key:
0  1  1  1  0  1  1  0
0  1  1  0  1  1  1  0
0  1  1  0  0  1  1  1
0  1  1  1  0  1  0  1
0  1  1  1  1  0  0  1
0  1  1  0  0  1  0  1
0  1  1  0  1  1  1  0
0  0  1  1  0  1  1  1 

IP Table:
58 50 42 34 26 18 10 2
60 52 44 36 28 20 12 4
62 54 46 38 30 22 14 6
64 56 48 40 32 24 16 8
57 49 41 33 25 17 9  1
59 51 43 35 27 19 11 3
61 53 45 37 29 21 13 5
63 55 47 39 31 23 15 7 

IP for vnguyen7:
0  1  1  1  1  1  1  1
1  0  0  1  1  0  0  1
1  1  1  0  1  1  1  1
1  0  1  1  1  1  0  0
0  0  0  0  0  0  0  0
1  1  1  1  1  1  1  1
0  1  0  1  0  0  1  0
1  1  0  0  0  1  1  1
________________________________________________________________________________

Key Gen: 
PC-1 for C_0:
57 49 41 33 25 17 9
1  58 50 42 34 26 18
10 2  59 51 43 35 27
19 11 3  60 52 44 36

PC-1 for D_0:
63 55 47 39 31 23 15
7  62 54 46 38 30 22
14 6  61 53 45 37 29
21 13 5  28 20 12 4

Take Original Key for vnguyen7 and apply the above table which converts the value from 64bit to 56 bit:
0  1  1  1  0  1  1  0
0  1  1  0  1  1  1  0
0  1  1  0  0  1  1  1
0  1  1  1  0  1  0  1
0  1  1  1  1  0  0  1
0  1  1  0  0  1  0  1
0  1  1  0  1  1  1  0
0  0  1  1  0  1  1  1 

C_0:
0  0  0  0  0  0  0
0  0  1  1  1  1  1
1  1  1  1  1  1  1
1  1  1  1  0  0  1

D_0:
1  1  0  0  0  1  1
1  1  1  1  0  1  1
1  1  0  1  0  1  0
0  1  0  1  0  0  1

________________________________________________________________________________

Left Shift Operations on C_0 and D_0:
Iteration  Number of
Number     Left Shifts
1          1

Given C_0 and D_0 from above, we have:
C_0: 0000000001111111111111111001
D_0: 1100011111101111010100101001

Left shifting by 1 (by removing from the front and add to end) gives C_1 and D_1:
C_1: 0000000011111111111111110010
D_1: 1000111111011110101001010011

________________________________________________________________________________

Key K_1:

From above we have:
C_1: 0000000011111111111111110010
D_1: 1000111111011110101001010011

Concatenating them gives us:
C_1D_1: 00000000111111111111111100101000111111011110101001010011

This can be rewritten as 8 by 7
C_1D_1: 
0  0  0  0  0  0  0  0  //8
1  1  1  1  1  1  1  1  //16
1  1  1  1  1  1  1  1  //24
0  0  1  0  1  0  0  0  //32
1  1  1  1  1  1  0  1  //40
1  1  1  0  1  0  1  0  //48
0  1  0  1  0  0  1  1  //56

We use the following PC-2 table to compute K_1 which reduces 56 bits to 48:
14 17 11 24 1  5
3  28 15 6  21 10
23 19 12 4  26 8
16 7  27 20 13 2
41 52 31 37 47 55
30 40 51 45 33 48
44 49 39 56 34 53
46 42 50 36 29 32

K_1:
1  1  1  1  0  0
0  0  1  0  1  1
1  1  1  0  0  0
1  0  1  1  1  0
1  1  0  1  1  1
0  1  0  1  1  0
0  0  0  1  1  0
0  1  1  1  1  0
________________________________________________________________________________

For L_0 and R_0, we take IP for vnguyen7 calculated from the top:
0  1  1  1  1  1  1  1
1  0  0  1  1  0  0  1
1  1  1  0  1  1  1  1
1  0  1  1  1  1  0  0
0  0  0  0  0  0  0  0
1  1  1  1  1  1  1  1
0  1  0  1  0  0  1  0
1  1  0  0  0  1  1  1

And split it in half (top half is L_0, bottom half is R_0):

L_0:
0  1  1  1  1  1  1  1
1  0  0  1  1  0  0  1
1  1  1  0  1  1  1  1
1  0  1  1  1  1  0  0

R_0:
0  0  0  0  0  0  0  0
1  1  1  1  1  1  1  1
0  1  0  1  0  0  1  0
1  1  0  0  0  1  1  1

________________________________________________________________________________

Mangler Function:
We take R_0 from above and rewrite it to be 4bit by 8bit:
0  0  0  0
0  0  0  0
1  1  1  1
1  1  1  1
0  1  0  1
0  0  1  0
1  1  0  0
0  1  1  1

And apply the given E BIT-SELECTION TABLE:
32 1  2  3  4  5
4  5  6  7  8  9
8  9  10 11 12 13
12 13 14 15 16 17
16 17 18 19 20 21
20 21 22 23 24 25
24 25 26 27 28 29
28 29 30 31 32 1

Which gives us R_expanded (from 32 bits to 48 bits):
1  0  0  0  0  0
0  0  0  0  0  1
0  1  1  1  1  1
1  1  1  1  1  0
1  0  1  0  1  0
1  0  0  1  0  1
0  1  1  0  0  0
0  0  1  1  1  0

Now we take K_1 computed from above:
1  1  1  1  0  0
0  0  1  0  1  1
1  1  1  0  0  0
1  0  1  1  1  0
1  1  0  1  1  1
0  1  0  1  1  0
0  0  0  1  1  0
0  1  1  1  1  0

K_1 XOR R_expanded: 011100001010100111010000011101110011011110010000

________________________________________________________________________________

S-Box Output:
Take K_1 XOR R_expanded computed from above and rewrite it as 6bit blocks by 8 bit:
011100
001010
100111
010000
011101
110011
011110
010000

For each 6bit block, the first and last bit is the row in binary, the four in the middle is the col in binary. So we have:
(00, 1110) -> S_1(0, 14) -> 0  -> 0000
(00, 0101) -> S_2(0, 5)  -> 11 -> 1011
(11, 0011) -> S_3(3, 3)  -> 0  -> 0000
(00, 1000) -> S_4(0, 8)  -> 1  -> 0001
(01, 1110) -> S_5(1, 14) -> 8  -> 1000
(11, 1001) -> S_6(3, 9)  -> 14 -> 1110
(00, 1111) -> S_7(0, 15) -> 1  -> 0001
(00, 1000) -> S_8(0, 8)  -> 10 -> 1010

Taking them and concatenating them all together, we get S-Box:
0000 1011 0000 0001 1000 1110 0001 1010

________________________________________________________________________________

For Permutation for S-Box, take S-Box from above, rewritten into 4 by 8:
0  0  0  0  //4
1  0  1  1  //8
0  0  0  0  //12
0  0  0  1  //16
1  0  0  0  //20
1  1  1  0  //24
0  0  0  1  //28
1  0  1  0  //32

And using table P:
16 7  20 21
29 12 28 17
1  15 23 26
5  18 31 10
2  8  24 14
32 27 3  9
19 13 30 6
22 11 4  25

P_S:
1  1  0  1
1  0  1  1
0  0  1  0
1  0  1  0
0  1  0  0
0  0  0  0
0  0  0  0
1  0  0  0

________________________________________________________________________________

To calculate L_0 XOR P_S, we take L_0 and P_S from above:
L_0: 01111111100110011110111110111100
P_S: 11011011001010100100000000001000

L_0 XOR P_S: 10100100101100111010111110110100

________________________________________________________________________________

For our Final 64 bit output (L_1R_1), we take L_1 and R_1 from above:
L_1 = R_0: 00000000111111110101001011000111
R_1 = L_0 XOR P_S: 10100100101100111010111110110100

And concatenate L_1R_1, so our Final 64 bit output (L_1R_1):
0000000011111111010100101100011110100100101100111010111110110100